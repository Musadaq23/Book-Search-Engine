[{"C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\index.js":"1","C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\App.js":"2","C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\pages\\SavedBooks.js":"3","C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\pages\\SearchBooks.js":"4","C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\components\\Navbar.js":"5","C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\components\\SignupForm.js":"6","C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\components\\LoginForm.js":"7","C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\utils\\API.js":"8","C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\utils\\localStorage.js":"9","C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\utils\\auth.js":"10","C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\utils\\queries.js":"11","C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\utils\\mutations.js":"12"},{"size":265,"mtime":1684199469511,"results":"13","hashOfConfig":"14"},{"size":1206,"mtime":1684226531766,"results":"15","hashOfConfig":"14"},{"size":2358,"mtime":1684226437165,"results":"16","hashOfConfig":"14"},{"size":4862,"mtime":1684226459136,"results":"17","hashOfConfig":"14"},{"size":2567,"mtime":1684180765157,"results":"18","hashOfConfig":"14"},{"size":3296,"mtime":1684227059783,"results":"19","hashOfConfig":"14"},{"size":2654,"mtime":1684222879814,"results":"20","hashOfConfig":"14"},{"size":1403,"mtime":1684226479675,"results":"21","hashOfConfig":"14"},{"size":793,"mtime":1684180765159,"results":"22","hashOfConfig":"14"},{"size":1234,"mtime":1684224305010,"results":"23","hashOfConfig":"14"},{"size":357,"mtime":1684226424088,"results":"24","hashOfConfig":"14"},{"size":1295,"mtime":1684226408330,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7cnch0",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\index.js",[],[],"C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\App.js",[],[],"C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\pages\\SavedBooks.js",["66","67"],[],"import {\n  Container,\n  Card,\n  Button,\n  Row,\n  Col\n} from 'react-bootstrap';\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { QUERY_ME } from \"../utils/queries\";\nimport { REMOVE_BOOK } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\nimport { removeBookId } from \"../utils/localStorage\";\n\nconst SavedBooks = () => {\n\n  const { loading, data } = useQuery(QUERY_ME);\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\n\n  const userData = data?.me || {};\n  console.log(userData);\n\n  // create function that accepts the book's bookId value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeBook({\n        variables: { bookId },\n      });\n\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <div fluid='true' className='text-light bg-dark p-5'>\n        <Container>\n          <h1>Viewing {userData.username}'s books!</h1>\n        </Container>\n      </div>\n      <Container>\n        <h2 className='pt-5'>\n          {userData.savedBooks?.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <Row>\n          {userData.savedBooks?.map((book) => {\n            return (\n              <Col md=\"4\">\n                <Card key={book.bookId} border='dark'>\n                  {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                  <Card.Body>\n                    <Card.Title>{book.title}</Card.Title>\n                    <p className='small'>Authors: {book.authors}</p>\n                    <Card.Text>{book.description}</Card.Text>\n                    <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                      Delete this Book!\n                    </Button>\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })}\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;","C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\pages\\SearchBooks.js",["68"],[],"import React, { useState, useEffect } from 'react';\nimport {\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  Row\n} from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { useMutation } from \"@apollo/client\";\nimport { SAVE_BOOK } from \"../utils/mutations\";\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n      console.log(response);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      console.log(bookData);\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await saveBook({\n        variables: { bookData: { ...bookToSave } },\n      });\n\n      console.log(data);\n      console.log(savedBookIds);\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <div className='text-light bg-dark pt-5'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </Container>\n      </div>\n\n      <Container>\n        <h2 className='pt-5'>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <Row>\n          {searchedBooks.map((book) => {\n            return (\n              <Col md=\"4\">\n                <Card key={book.bookId} border='dark'>\n                  {book.image ? (\n                    <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                  ) : null}\n                  <Card.Body>\n                    <Card.Title>{book.title}</Card.Title>\n                    <p className='small'>Authors: {book.authors}</p>\n                    <Card.Text>{book.description}</Card.Text>\n                    {Auth.loggedIn() && (\n                      <Button\n                        disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                        className='btn-block btn-info'\n                        onClick={() => handleSaveBook(book.bookId)}>\n                        {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                          ? 'This book has already been saved!'\n                          : 'Save this Book!'}\n                      </Button>\n                    )}\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })}\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;","C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\components\\Navbar.js",[],[],[],"C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\components\\SignupForm.js",[],[],"C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\components\\LoginForm.js",[],[],"C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\utils\\API.js",[],[],"C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\utils\\localStorage.js",[],[],"C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\utils\\auth.js",["69"],[],"// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\utils\\queries.js",[],[],"C:\\Users\\musad\\bootcamp\\solid-broccoli\\client\\src\\utils\\mutations.js",[],[],{"ruleId":"70","severity":1,"message":"71","line":18,"column":24,"nodeType":"72","messageId":"73","endLine":18,"endColumn":29},{"ruleId":"70","severity":1,"message":"74","line":32,"column":15,"nodeType":"72","messageId":"73","endLine":32,"endColumn":19},{"ruleId":"70","severity":1,"message":"71","line":26,"column":22,"nodeType":"72","messageId":"73","endLine":26,"endColumn":27},{"ruleId":"75","severity":1,"message":"76","line":49,"column":1,"nodeType":"77","endLine":49,"endColumn":34},"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration"]